{
  classHeader="header.txt"
  parserClass="com.r4intellij.lang.parser.RParser"
  stubParserClass="com.r4intellij.lang.parser.GrammarParserUtil"

  implements="com.r4intellij.psi.RCompositeElement"
  extends="com.r4intellij.psi.impl.RCompositeElementImpl"

  psiClassPrefix="R"
  psiImplClassSuffix="Impl"
  psiPackage="com.r4intellij.psi"
  psiImplPackage="com.r4intellij.psi.impl"

  elementTypeHolderClass="com.r4intellij.psi.RTypes"
  elementTypePrefix="BNF_"
  elementTypeClass="com.r4intellij.psi.RCompositeElementType"
  tokenTypeClass="com.r4intellij.lang.lexer.RTokenType"
  
  // tokens
  OP_EQ="="
  OP_IS="::="
  OP_OR="|"
  OP_OPT="?"
  OP_ONEMORE="+"
  OP_ZEROMORE="*"
  OP_AND="&"
  OP_NOT="!"
  SEMICOLON=";"
  LEFT_BRACE="{"
  RIGHT_BRACE="}"
  LEFT_BRACKET="["
  RIGHT_BRACKET="]"
  LEFT_PAREN="("
  RIGHT_PAREN=")"
  EXTERNAL_START="<<"
  EXTERNAL_END=">>"

  named="com.r4intellij.psi.RNamedElement"
  namedImpl="com.r4intellij.psi.impl.bnfclasses.RNamedElementImpl"
  parenthesized="com.r4intellij.psi.impl.bnfclasses.RParenthesized"
}

external grammar ::= parseGrammar grammar_element
private grammar_element ::= attrs | rule {recoverUntil="grammar_element_recover"}
private grammar_element_recover::=!('{'|rule_start)

rule ::= rule_start expression attrs? ';'? {pin=2 extends=namedImpl implements=named}
private rule_start ::= modifier* id '::='

expression ::= choice?

modifier ::= 'private' | 'external' | 'meta' | 'inner' | 'left';

attrs ::= '{' attr* '}' {pin=1}

attr ::= attr_start attr_value ';'? {pin=1 recoverUntil="attr_recover_until" extends=namedImpl implements=named}
private attr_start::=id attr_pattern? '='
private attr_recover_until::=!('}'|attr_start)
attr_value ::= (reference_or_token | literal_expression) !'=';
attr_pattern ::= '(' string ')'

choice ::= choice_body { extends="expression" }
private choice_body ::= sequence choice_tail*
private choice_tail ::= '|' sequence {pin=1}

sequence ::= option + { extends="expression" recoverUntil="sequence_recover"}
private sequence_recover ::= !(';'|'|'|'('|')'|'['|']'|'{'|'}') grammar_element_recover

private option ::= quantified | predicate;
predicate ::=  predicate_sign  simple { extends="expression" }
predicate_sign ::= ('&' | '!')
quantified ::= paren_opt_expression | simple quantifier? {extends="expression" }
paren_opt_expression ::='[' expression ']' {pin=1 extends="quantified" implements=parenthesized}
quantifier ::= '?' | '+' | '*'

private simple ::= !(modifier* id '::=' ) reference_or_token | literal_expression | external_expression | paren_expression
external_expression ::= '<<' reference_or_token option * '>>' {pin=2 extends="expression"}
reference_or_token ::= id  { extends="expression" mixin="com.r4intellij.psi.impl.bnfclasses.RRefOrTokenImpl"}
literal_expression ::= string_literal_expression | number { extends="expression" }
string_literal_expression ::= string { extends="literal_expression" mixin="com.r4intellij.psi.impl.bnfclasses.RStringImpl"}
paren_expression ::= simple_paren_expression | alt_choice_expression { extends="expression" implements=parenthesized}
private simple_paren_expression ::= '(' expression ')' {pin=1}
private alt_choice_expression::= '{' !attr_start expression '}' {pin=2}
