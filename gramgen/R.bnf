{
	classHeader="header.txt"
	parserClass="com.r4intellij.lang.parser.RParser"
	parserUtilClass="com.r4intellij.lang.parser.RParserUtil"
	stubParserClass="com.r4intellij.lang.parser.GrammarParserUtil"

	implements="com.r4intellij.psi.RCompositeElement"
	extends="com.r4intellij.psi.impl.RCompositeElementImpl"

	psiClassPrefix="R"
	psiImplClassSuffix="Impl"
	psiPackage="com.r4intellij.psi"
	psiImplPackage="com.r4intellij.psi.impl"

	elementTypeHolderClass="com.r4intellij.psi.RTypes"
	elementTypePrefix="R_"
	elementTypeClass="com.r4intellij.psi.RCompositeElementType"
	tokenTypeClass="com.r4intellij.lang.lexer.RTokenType"


	tokens = [
			// tokens as defined in original_r_grammar.y
			// onthefly STR_CONST
			// onthefly NUM_CONST
			// onthefly NULL_CONST
			// onthefly SYMBOL
			// onthefly FUNCTION
			LEFT_ASSIGN="<-"
			EQ_ASSIGN="="
			RIGHT_ASSIGN="->"
			GLOBAL_LEFT_ASSIGN="<<-"
			GLOBAL_RIGHT_ASSIGN="->>"
			LBB="[["
			RBB="]]"
			// onthefly FOR
			// onthefly IN
			// onthefly IF
			// onthefly ELSE
			// onthefly WHILE
			// onthefly NEXT
			// onthefly BREAK
			// onthefly REPEAT
			GT=">"
			GE=">="
			LT="<"
			LE="<="
			EQ="=="
			NE="!="
			AND="&"
			OR="|"
			AND2="&&"
			OR2="||"
			NS_GET="::"
			NS_GET_INT=":::"
			// onthefly COMMENT
			// onthefly SPACES
			// onthefly ROXYGEN_COMMENT
			SYMBOL_FORMALS="..."
			// just the = with a function definition, there should be part of a parser rule EQ_FORMALS
			// see example parsing ::= the name of a named argument in a function call EQ_SUB
			// see example parsing ::= the = of a named argument in a function call SYMBOL_SUB
			// SYMBOL_FUNCTION_CALL the name of the function of a function call
			// ?? SYMBOL_PACKAGE
			// ?? COLON_ASSIGN
			SLOT="@"

			// additional tokens because of grammar def
			SEMICOLON=";"
			LEFT_BRACE="{"
			RIGHT_BRACE="}"
			LEFT_BRACKET="["
			RIGHT_BRACKET="]"
			LEFT_PAREN="("
			RIGHT_PAREN=")"

			COLON=":"
			COMMA=","
			SEMICOLON=";"
			DOT="."
			TILDE="~"

			LIST_SUBSET="$"
			//VARARGS="..."
			ARITH_PLUS="+"
			ARITH_MINUS="-"
			NEGATION="!"
			QUESTION="?"
			ARITH_MULT="*"
			ARITH_DIV="/"
			ARITH_MOD="%"
			ARITH_EXPONENTIAION="^"
			//onthefly ARITH_MISC

			id="regexp:\w+"
			string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\\'|\\)*\")"
			number="regexp:\d+"
			comment="regexp:#.*"
			function="regexp:\.+\("
		]

		//named="com.r4intellij.psi.RNamedElement"
		//namedImpl="com.r4intellij.psi.impl.RNamedElementImpl"
		mixin("string_literal")="com.r4intellij.psi.impl.RStringImpl"
		mixin("variable")="com.r4intellij.psi.impl.RVarImpl"

}

external grammar ::= parseGrammar prog


prog	::=
		(command)*
		EOF
		;

command ::=
		( section
		| expr_or_assign (';'| NL)
		| NL
		)
		;

expr_or_assign
    ::= expr
    |   equal_assign
    ;

section ::= SECTION_COMMENT {extends="com.r4intellij.psi.impl.AbstractRSection"}

equal_assign
	::= expr EQ_ASSIGN expr_or_assign

expr
	::= NUM_CONST
	| STR_CONST
	| NULL_CONST
	| string_literal
	| funcall
	| variable (NS_GET SYMBOL | NS_GET STR_CONST | NS_GET_INT SYMBOL | NS_GET_INT STR_CONST)?
	| '{' exprlist '}'
	| '(' expr_or_assign ')'
	| '-' expr
	| '+' expr
	| '!' expr
	| '~' expr
	| '?' expr
	| fundef
	| expr ':' expr
	| expr '+' expr
	| expr '-' expr
	| expr '*' expr
	| expr '/' expr
	| expr '^' expr
	| expr SPECIAL expr
	| expr '%' expr
	| expr '~' expr
	| expr '?' expr
	| expr LT expr
	| expr LE expr
	| expr EQ expr
	| expr NE expr
	| expr GE expr
	| expr GT expr
	| expr AND expr
	| expr OR expr
	| expr AND2 expr
	| expr OR2 expr
	| expr LEFT_ASSIGN expr
	| expr RIGHT_ASSIGN expr
	| FUNCTION '(' formlist ')' cr expr_or_assign
	| expr '(' sublist ')'
	| IF ifcond expr_or_assign
	| IF ifcond expr_or_assign ELSE expr_or_assign
	| FOR forcond expr_or_assign
	| WHILE cond expr_or_assign
	| REPEAT expr_or_assign
	| expr LBB sublist ']' ']'
	| expr '[' sublist ']'
	| SYMBOL NS_GET SYMBOL
	| SYMBOL NS_GET STR_CONST
	| STR_CONST NS_GET SYMBOL
	| STR_CONST NS_GET STR_CONST
	| SYMBOL NS_GET_INT SYMBOL
	| SYMBOL NS_GET_INT STR_CONST
	| STR_CONST NS_GET_INT SYMBOL
	| STR_CONST NS_GET_INT STR_CONST
	| expr '$' SYMBOL
	| expr '$' STR_CONST
	| expr '@' SYMBOL
	| expr '@' STR_CONST
	| NEXT
	| BREAK
    ;

variable ::= SYMBOL // {extends=namedImpl implements=named};

cond
	::= '(' expr ')'
	;

ifcond
	::='(' expr ')'
	;

forcond
	::= '(' SYMBOL IN expr ')'
	;

fundef ::= FUNCTION '(' fundef_args? ')'  expr_or_assign;

fundef_args ::= fd_argument (EOL? ',' EOL? fd_argument)*

// called form in th r grammar definition
fd_argument ::=  SYMBOL '=' expr
        | SYMBOL
        | STR_CONST '=' expr
        | STR_CONST
        | SYMBOL_FORMALS
        ;

exprlist
	::= /* empty */
	| expr_or_assign
	| exprlist ';' expr_or_assign
	| exprlist ';'
	| exprlist '\n' expr_or_assign
	| exprlist '\n'
	;

string_literal ::= STR_CONST //{extends="" implements=""}

variable ::= SYMBOL

funcall ::= variable '(' sublist? ')' {extends="com.r4intellij.psi.impl.AbstractRFunCall" implements="com.r4intellij.psi.RNamedElement"};

sublist
	::= sub
	| sublist cr ',' sub
	;

sub
	::= /* empty */
	| expr
	| SYMBOL EQ_ASSIGN
	| SYMBOL EQ_ASSIGN expr
	| STR_CONST EQ_ASSIGN
	| STR_CONST EQ_ASSIGN expr
	| NULL_CONST EQ_ASSIGN
	| NULL_CONST EQ_ASSIGN expr
	;

formlist
	::= /* empty */
	| SYMBOL
	| SYMBOL EQ_ASSIGN expr
	| formlist ',' SYMBOL
	| formlist ',' SYMBOL EQ_ASSIGN expr
	;

NL      ::=   '\r'? '\n' ;

cr
	::= /* empty */
	;