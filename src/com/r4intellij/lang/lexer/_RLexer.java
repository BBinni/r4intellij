/* The following code was generated by JFlex 1.4.3 on 7/24/14 12:45 AM */

/** Based on the arc lexer (http://code.google.com/p/intelli-arc/) **/

package com.r4intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.r4intellij.psi.RTypes.*;


import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/24/14 12:45 AM from the specification file
 * <tt>D:/Projects/r4intellij/src/com/r4intellij/lang/lexer/r.flex</tt>
 */
public class _RLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\54\1\15"+
    "\1\3\1\70\1\65\1\60\1\16\1\20\1\47\1\64\1\12\1\46"+
    "\1\62\1\13\1\66\1\6\11\7\1\45\1\44\1\57\1\55\1\56"+
    "\1\72\1\71\4\4\1\11\6\4\1\10\1\4\1\42\6\4\1\43"+
    "\5\4\1\52\1\14\1\53\1\67\1\5\1\0\1\36\1\35\1\24"+
    "\1\4\1\33\1\21\1\4\1\31\1\26\1\4\1\37\1\32\1\4"+
    "\1\23\1\27\1\41\1\4\1\30\1\34\1\25\1\22\1\4\1\17"+
    "\1\40\2\4\1\50\1\61\1\51\1\63\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\3\1\4\1\5\2\6\1\7"+
    "\1\5\2\10\1\5\1\11\7\5\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\2\4\1\0\2\6\2\5"+
    "\3\10\1\5\1\41\4\5\1\42\1\43\4\5\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\0\1\53"+
    "\1\54\1\55\1\56\2\0\1\33\1\4\1\6\1\0"+
    "\1\5\1\57\2\5\1\60\5\5\1\61\1\62\1\63"+
    "\1\64\1\4\2\5\1\65\1\5\1\66\1\5\1\67"+
    "\1\4\1\70\2\5\1\71\1\0\1\4\1\5\1\72"+
    "\1\0\1\4\1\5\1\73\1\4\1\74\160\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\73\0\261\0\354\0\u0127\0\u0162"+
    "\0\73\0\u019d\0\u01d8\0\u0213\0\u024e\0\73\0\u0289\0\u02c4"+
    "\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\73\0\u0426\0\73"+
    "\0\73\0\73\0\73\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0639\0\73\0\73\0\u0674\0\73"+
    "\0\73\0\73\0\73\0\73\0\u06af\0\u06ea\0\u0725\0\u0760"+
    "\0\73\0\u079b\0\u07d6\0\u0811\0\73\0\u084c\0\u0887\0\73"+
    "\0\u08c2\0\u08fd\0\u0938\0\u0973\0\354\0\354\0\u09ae\0\u09e9"+
    "\0\u0a24\0\u0a5f\0\u0a9a\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\u0ad5\0\73\0\73\0\73\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\73\0\u0bc1\0\u0bfc\0\u0bfc\0\u0c37\0\354\0\u0c72\0\u0cad"+
    "\0\354\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\73\0\73"+
    "\0\73\0\73\0\u0e0f\0\u0e4a\0\u0e85\0\354\0\u0ec0\0\354"+
    "\0\u0efb\0\354\0\u0f36\0\354\0\u0f71\0\u0fac\0\354\0\u0fe7"+
    "\0\u1022\0\u105d\0\354\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184"+
    "\0\354\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9"+
    "\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9"+
    "\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81"+
    "\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59"+
    "\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009"+
    "\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1"+
    "\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9"+
    "\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591"+
    "\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769"+
    "\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941"+
    "\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19"+
    "\0\u2b54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\2\6\1\11\1\12\1\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\6\1\20\2\6\1\21\1\6\1\22\2\6"+
    "\1\23\1\6\1\24\4\6\1\25\1\6\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\74\0\1\3\71\0"+
    "\1\55\1\0\1\55\1\56\67\55\4\0\6\6\1\0"+
    "\1\6\3\0\1\6\1\0\23\6\35\0\2\7\1\0"+
    "\1\57\1\0\1\60\17\0\1\57\45\0\2\10\1\61"+
    "\1\57\1\0\1\60\17\0\1\57\43\0\2\6\2\62"+
    "\2\6\1\0\1\63\3\0\1\6\1\0\23\6\27\0"+
    "\14\13\1\64\1\65\55\13\14\14\1\66\1\14\1\65"+
    "\54\14\4\0\6\6\1\0\1\6\3\0\1\67\1\70"+
    "\10\6\1\71\12\6\33\0\6\6\1\0\1\6\3\0"+
    "\1\6\1\0\1\6\1\72\4\6\1\73\14\6\33\0"+
    "\6\6\1\0\1\6\3\0\1\6\1\0\12\6\1\74"+
    "\10\6\33\0\6\6\1\0\1\6\3\0\1\6\1\0"+
    "\1\75\1\6\1\76\20\6\33\0\6\6\1\0\1\6"+
    "\3\0\1\6\1\0\12\6\1\77\10\6\33\0\6\6"+
    "\1\0\1\6\3\0\1\6\1\0\11\6\1\100\11\6"+
    "\33\0\6\6\1\0\1\6\3\0\1\6\1\0\7\6"+
    "\1\101\13\6\33\0\6\6\1\0\1\6\3\0\1\6"+
    "\1\0\22\6\1\102\74\0\1\103\77\0\1\104\73\0"+
    "\1\105\74\0\1\106\72\0\1\107\72\0\1\110\72\0"+
    "\1\111\1\0\1\112\2\0\1\113\70\0\1\114\73\0"+
    "\1\115\67\0\1\116\26\0\1\117\13\0\1\120\1\117"+
    "\10\0\1\117\15\0\1\117\5\0\1\117\1\121\1\117"+
    "\4\0\1\55\1\0\72\55\1\0\1\55\1\122\67\55"+
    "\6\0\2\123\2\0\1\124\47\0\1\124\16\0\2\60"+
    "\1\0\1\57\21\0\1\57\43\0\2\6\2\62\1\6"+
    "\1\125\1\0\1\6\3\0\1\6\1\0\12\6\1\125"+
    "\10\6\33\0\6\6\1\0\1\126\3\0\1\6\1\0"+
    "\23\6\27\0\1\13\1\0\71\13\1\14\1\0\71\14"+
    "\4\0\6\6\1\0\1\6\3\0\1\67\1\70\23\6"+
    "\33\0\6\6\1\0\1\6\3\0\1\6\1\0\5\6"+
    "\1\127\15\6\33\0\6\6\1\0\1\6\3\0\1\6"+
    "\1\0\2\6\1\130\20\6\33\0\6\6\1\0\1\6"+
    "\3\0\1\6\1\0\7\6\1\131\13\6\33\0\6\6"+
    "\1\0\1\6\3\0\1\6\1\0\17\6\1\132\3\6"+
    "\33\0\6\6\1\0\1\6\3\0\1\6\1\0\20\6"+
    "\1\133\2\6\33\0\6\6\1\0\1\6\3\0\1\6"+
    "\1\0\13\6\1\134\7\6\33\0\6\6\1\0\1\6"+
    "\3\0\1\6\1\0\12\6\1\135\10\6\33\0\4\6"+
    "\1\136\1\6\1\0\1\6\3\0\1\6\1\0\23\6"+
    "\74\0\1\137\107\0\1\140\66\0\1\141\101\0\1\142"+
    "\30\0\1\117\47\0\1\55\1\0\1\55\1\143\67\55"+
    "\6\0\2\123\67\0\6\6\1\124\1\6\3\0\1\6"+
    "\1\0\23\6\16\0\1\124\14\0\6\6\1\0\1\6"+
    "\3\0\1\6\1\0\11\6\1\144\11\6\33\0\6\6"+
    "\1\0\1\6\3\0\1\6\1\0\3\6\1\145\17\6"+
    "\33\0\6\6\1\0\1\6\3\0\1\6\1\0\4\6"+
    "\1\146\16\6\33\0\6\6\1\0\1\6\3\0\1\6"+
    "\1\0\12\6\1\147\10\6\33\0\6\6\1\0\1\6"+
    "\3\0\1\6\1\0\12\6\1\150\10\6\33\0\6\6"+
    "\1\0\1\6\3\0\1\6\1\0\15\6\1\151\5\6"+
    "\33\0\4\6\1\152\1\6\1\0\1\6\3\0\1\6"+
    "\1\0\23\6\27\0\1\55\1\0\1\55\1\153\67\55"+
    "\4\0\6\6\1\0\1\6\3\0\1\6\1\0\12\6"+
    "\1\154\10\6\33\0\6\6\1\0\1\6\3\0\1\6"+
    "\1\0\4\6\1\155\16\6\33\0\6\6\1\0\1\6"+
    "\3\0\1\6\1\0\15\6\1\156\5\6\33\0\6\6"+
    "\1\0\1\6\3\0\1\6\1\0\16\6\1\157\4\6"+
    "\27\0\1\55\1\160\1\55\1\161\67\55\4\0\6\6"+
    "\1\0\1\6\3\0\1\6\1\0\5\6\1\162\15\6"+
    "\33\0\6\6\1\0\1\6\3\0\1\6\1\0\4\6"+
    "\1\163\16\6\32\0\1\164\67\0\1\55\1\160\1\55"+
    "\1\165\67\55\4\0\6\6\1\0\1\6\3\0\1\6"+
    "\1\0\6\6\1\166\14\6\32\0\1\167\67\0\1\55"+
    "\1\160\1\55\1\170\67\55\4\0\6\6\1\0\1\6"+
    "\3\0\1\6\1\0\2\6\1\171\20\6\27\0\1\167"+
    "\1\0\71\167\1\55\1\160\1\55\1\172\70\55\1\160"+
    "\1\55\1\173\70\55\1\160\1\55\1\174\70\55\1\160"+
    "\1\55\1\175\70\55\1\160\1\55\1\176\70\55\1\160"+
    "\1\55\1\177\70\55\1\160\1\55\1\200\70\55\1\160"+
    "\1\55\1\201\70\55\1\160\1\55\1\202\70\55\1\160"+
    "\1\55\1\203\70\55\1\160\1\55\1\204\70\55\1\160"+
    "\1\55\1\205\70\55\1\160\1\55\1\206\70\55\1\160"+
    "\1\55\1\207\70\55\1\160\1\55\1\210\70\55\1\160"+
    "\1\55\1\211\70\55\1\160\1\55\1\212\70\55\1\160"+
    "\1\55\1\213\70\55\1\160\1\55\1\214\70\55\1\160"+
    "\1\55\1\215\70\55\1\160\1\55\1\216\70\55\1\160"+
    "\1\55\1\217\70\55\1\160\1\55\1\220\70\55\1\160"+
    "\1\55\1\221\70\55\1\160\1\55\1\222\70\55\1\160"+
    "\1\55\1\223\70\55\1\160\1\55\1\224\70\55\1\160"+
    "\1\55\1\225\70\55\1\160\1\55\1\226\70\55\1\160"+
    "\1\55\1\227\70\55\1\160\1\55\1\230\70\55\1\160"+
    "\1\55\1\231\70\55\1\160\1\55\1\232\70\55\1\160"+
    "\1\55\1\233\70\55\1\160\1\55\1\234\70\55\1\160"+
    "\1\55\1\235\70\55\1\160\1\55\1\236\70\55\1\160"+
    "\1\55\1\237\70\55\1\160\1\55\1\240\70\55\1\160"+
    "\1\55\1\241\70\55\1\160\1\55\1\242\70\55\1\160"+
    "\1\55\1\243\70\55\1\160\1\55\1\244\70\55\1\160"+
    "\1\55\1\245\70\55\1\160\1\55\1\246\70\55\1\160"+
    "\1\55\1\247\70\55\1\160\1\55\1\250\70\55\1\160"+
    "\1\55\1\251\70\55\1\160\1\55\1\252\70\55\1\160"+
    "\1\55\1\253\70\55\1\160\1\55\1\254\70\55\1\160"+
    "\1\55\1\255\70\55\1\160\1\55\1\256\70\55\1\160"+
    "\1\55\1\257\70\55\1\160\1\55\1\260\70\55\1\160"+
    "\1\55\1\261\70\55\1\160\1\55\1\262\70\55\1\160"+
    "\1\55\1\263\70\55\1\160\1\55\1\264\70\55\1\160"+
    "\1\55\1\265\70\55\1\160\1\55\1\266\70\55\1\160"+
    "\1\55\1\267\70\55\1\160\1\55\1\270\70\55\1\160"+
    "\1\55\1\271\70\55\1\160\1\55\1\272\70\55\1\160"+
    "\1\55\1\273\70\55\1\160\1\55\1\274\70\55\1\160"+
    "\1\55\1\275\70\55\1\160\1\55\1\276\70\55\1\160"+
    "\1\55\1\277\70\55\1\160\1\55\1\300\70\55\1\160"+
    "\1\55\1\301\70\55\1\160\1\55\1\302\70\55\1\160"+
    "\1\55\1\303\70\55\1\160\1\55\1\304\70\55\1\160"+
    "\1\55\1\305\70\55\1\160\1\55\1\306\70\55\1\160"+
    "\1\55\1\307\70\55\1\160\1\55\1\310\70\55\1\160"+
    "\1\55\1\311\70\55\1\160\1\55\1\312\70\55\1\160"+
    "\1\55\1\313\70\55\1\160\1\55\1\314\70\55\1\160"+
    "\1\55\1\315\70\55\1\160\1\55\1\316\70\55\1\160"+
    "\1\55\1\317\70\55\1\160\1\55\1\320\70\55\1\160"+
    "\1\55\1\321\70\55\1\160\1\55\1\322\70\55\1\160"+
    "\1\55\1\323\70\55\1\160\1\55\1\324\70\55\1\160"+
    "\1\55\1\325\70\55\1\160\1\55\1\326\70\55\1\160"+
    "\1\55\1\327\70\55\1\160\1\55\1\330\70\55\1\160"+
    "\1\55\1\331\70\55\1\160\1\55\1\332\70\55\1\160"+
    "\1\55\1\333\70\55\1\160\1\55\1\334\70\55\1\160"+
    "\1\55\1\335\70\55\1\160\1\55\1\336\70\55\1\160"+
    "\1\55\1\337\70\55\1\160\1\55\1\340\70\55\1\160"+
    "\1\55\1\341\70\55\1\160\1\55\1\342\70\55\1\160"+
    "\1\55\1\343\70\55\1\160\1\55\1\344\70\55\1\160"+
    "\1\55\1\345\70\55\1\160\1\55\1\346\70\55\1\160"+
    "\1\55\1\347\70\55\1\160\1\55\1\350\70\55\1\160"+
    "\1\55\1\351\70\55\1\160\71\55";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11151];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\4\1\1\11\4\1\1\11"+
    "\7\1\1\11\1\1\4\11\11\1\2\11\1\1\5\11"+
    "\2\1\1\0\1\1\1\11\3\1\1\11\2\1\1\11"+
    "\13\1\6\11\1\0\3\11\1\1\2\0\1\11\2\1"+
    "\1\0\12\1\4\11\15\1\1\0\3\1\1\0\165\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  StringBuffer string = new StringBuffer();

  //helper
  long yychar = 0;


  public _RLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _RLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 47: 
          { return R_SYMBOL_FORMALS;
          }
        case 61: break;
        case 43: 
          { return R_LEFT_ASSIGN;
          }
        case 62: break;
        case 48: 
          { return R_FOR;
          }
        case 63: break;
        case 55: 
          { return R_NULL_CONST;
          }
        case 64: break;
        case 14: 
          { yybegin(YYINITIAL); return R_LEFT_BRACE;
          }
        case 65: break;
        case 37: 
          { yybegin(YYINITIAL); return R_LBB;
          }
        case 66: break;
        case 58: 
          { return R_REPEAT;
          }
        case 67: break;
        case 27: 
          { return R_ARITH_MOD;
          }
        case 68: break;
        case 24: 
          { return R_ARITH_MINUS;
          }
        case 69: break;
        case 31: 
          { return R_SLOT;
          }
        case 70: break;
        case 17: 
          { yybegin(YYINITIAL); return R_RIGHT_BRACKET;
          }
        case 71: break;
        case 16: 
          { yybegin(YYINITIAL); return R_LEFT_BRACKET;
          }
        case 72: break;
        case 19: 
          { return R_EQ_ASSIGN;
          }
        case 73: break;
        case 23: 
          { return R_OR;
          }
        case 74: break;
        case 35: 
          { return R_IN;
          }
        case 75: break;
        case 44: 
          { return R_AND2;
          }
        case 76: break;
        case 28: 
          { return R_ARITH_DIV;
          }
        case 77: break;
        case 25: 
          { return R_TILDE;
          }
        case 78: break;
        case 50: 
          { return R_GLOBAL_LEFT_ASSIGN;
          }
        case 79: break;
        case 49: 
          { yybegin(YYINITIAL); return R_NS_GET_INT;
          }
        case 80: break;
        case 36: 
          { yybegin(YYINITIAL); return R_NS_GET;
          }
        case 81: break;
        case 41: 
          { return R_GE;
          }
        case 82: break;
        case 10: 
          { yybegin(YYINITIAL); return R_SEMICOLON;
          }
        case 83: break;
        case 54: 
          { return R_ELSE;
          }
        case 84: break;
        case 46: 
          { return R_RIGHT_ASSIGN;
          }
        case 85: break;
        case 12: 
          { yybegin(YYINITIAL); return R_COMMA;
          }
        case 86: break;
        case 1: 
          { yybegin(YYINITIAL); return R_EOL;
          }
        case 87: break;
        case 33: 
          { yybegin(YYINITIAL); return R_FUNCALL;
          }
        case 88: break;
        case 20: 
          { return R_GT;
          }
        case 89: break;
        case 7: 
          { return R_ARITH_PLUS;
          }
        case 90: break;
        case 13: 
          { yybegin(YYINITIAL); return R_RIGHT_PAREN;
          }
        case 91: break;
        case 11: 
          { yybegin(YYINITIAL); return R_COLON;
          }
        case 92: break;
        case 32: 
          { return R_QUESTION;
          }
        case 93: break;
        case 39: 
          { return R_NE;
          }
        case 94: break;
        case 52: 
          { return R_ARITH_MISC;
          }
        case 95: break;
        case 38: 
          { yybegin(YYINITIAL); return R_RBB;
          }
        case 96: break;
        case 53: 
          { return R_NEXT;
          }
        case 97: break;
        case 30: 
          { return R_LIST_SUBSET;
          }
        case 98: break;
        case 3: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 99: break;
        case 60: 
          { return R_FUNCTION;
          }
        case 100: break;
        case 8: 
          { yybegin(YYINITIAL); return R_STR_CONST;
          }
        case 101: break;
        case 40: 
          { return R_EQ;
          }
        case 102: break;
        case 22: 
          { return R_AND;
          }
        case 103: break;
        case 18: 
          { return R_NEGATION;
          }
        case 104: break;
        case 26: 
          { return R_ARITH_MULT;
          }
        case 105: break;
        case 9: 
          { yybegin(YYINITIAL); return R_LEFT_PAREN;
          }
        case 106: break;
        case 4: 
          { yybegin(YYINITIAL); return R_COMMENT;
          }
        case 107: break;
        case 42: 
          { return R_LE;
          }
        case 108: break;
        case 34: 
          { return R_IF;
          }
        case 109: break;
        case 5: 
          { yybegin(YYINITIAL); return R_SYMBOL;
          }
        case 110: break;
        case 45: 
          { return R_OR2;
          }
        case 111: break;
        case 15: 
          { yybegin(YYINITIAL); return R_RIGHT_BRACE;
          }
        case 112: break;
        case 59: 
          { yybegin(YYINITIAL); return R_SECTION_COMMENT;
          }
        case 113: break;
        case 21: 
          { return R_LT;
          }
        case 114: break;
        case 56: 
          { return R_WHILE;
          }
        case 115: break;
        case 29: 
          { return R_ARITH_EXPONENTIAION;
          }
        case 116: break;
        case 6: 
          { return R_NUM_CONST;
          }
        case 117: break;
        case 51: 
          { return R_GLOBAL_RIGHT_ASSIGN;
          }
        case 118: break;
        case 57: 
          { return R_BREAK;
          }
        case 119: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 120: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
