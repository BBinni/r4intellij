/* The following code was generated by JFlex 1.4.3 on 7/23/14 7:09 PM */

/** Based on the arc lexer (http://code.google.com/p/intelli-arc/) **/

package com.r4intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.r4intellij.psi.RTypes.*;


import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/23/14 7:09 PM from the specification file
 * <tt>/Users/moon/Projects/git-projects/r4intellij/src/com/r4intellij/lang/lexer/r.flex</tt>
 */
public class _RLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\61\1\15"+
    "\1\3\1\73\1\17\1\65\1\16\1\31\1\33\1\70\1\12\1\54"+
    "\1\30\1\13\1\71\1\6\11\7\1\53\1\52\1\64\1\62\1\63"+
    "\1\75\1\74\4\4\1\11\6\4\1\10\1\4\1\50\6\4\1\51"+
    "\5\4\1\57\1\14\1\60\1\72\1\5\1\0\1\24\1\44\1\36"+
    "\1\4\1\20\1\22\1\4\1\43\1\40\1\4\1\45\1\25\1\4"+
    "\1\35\1\21\1\47\1\4\1\41\1\32\1\37\1\34\1\23\1\42"+
    "\1\46\2\4\1\55\1\66\1\56\1\67\53\0\1\26\12\0\1\26"+
    "\4\0\1\26\5\0\27\26\1\0\37\26\1\0\u013f\26\31\0\162\26"+
    "\4\0\14\26\16\0\5\26\11\0\1\26\213\0\1\26\13\0\1\26"+
    "\1\0\3\26\1\0\1\26\1\0\24\26\1\0\54\26\1\0\46\26"+
    "\1\0\5\26\4\0\202\26\10\0\105\26\1\0\46\26\2\0\2\26"+
    "\6\0\20\26\41\0\46\26\2\0\1\26\7\0\47\26\110\0\33\26"+
    "\5\0\3\26\56\0\32\26\5\0\13\26\25\0\12\27\4\0\2\26"+
    "\1\0\143\26\1\0\1\26\17\0\2\26\7\0\2\26\12\27\3\26"+
    "\2\0\1\26\20\0\1\26\1\0\36\26\35\0\3\26\60\0\46\26"+
    "\13\0\1\26\u0152\0\66\26\3\0\1\26\22\0\1\26\7\0\12\26"+
    "\4\0\12\27\25\0\10\26\2\0\2\26\2\0\26\26\1\0\7\26"+
    "\1\0\1\26\3\0\4\26\3\0\1\26\36\0\2\26\1\0\3\26"+
    "\4\0\12\27\2\26\23\0\6\26\4\0\2\26\2\0\26\26\1\0"+
    "\7\26\1\0\2\26\1\0\2\26\1\0\2\26\37\0\4\26\1\0"+
    "\1\26\7\0\12\27\2\0\3\26\20\0\11\26\1\0\3\26\1\0"+
    "\26\26\1\0\7\26\1\0\2\26\1\0\5\26\3\0\1\26\22\0"+
    "\1\26\17\0\2\26\4\0\12\27\25\0\10\26\2\0\2\26\2\0"+
    "\26\26\1\0\7\26\1\0\2\26\1\0\5\26\3\0\1\26\36\0"+
    "\2\26\1\0\3\26\4\0\12\27\1\0\1\26\21\0\1\26\1\0"+
    "\6\26\3\0\3\26\1\0\4\26\3\0\2\26\1\0\1\26\1\0"+
    "\2\26\3\0\2\26\3\0\3\26\3\0\10\26\1\0\3\26\55\0"+
    "\11\27\25\0\10\26\1\0\3\26\1\0\27\26\1\0\12\26\1\0"+
    "\5\26\46\0\2\26\4\0\12\27\25\0\10\26\1\0\3\26\1\0"+
    "\27\26\1\0\12\26\1\0\5\26\3\0\1\26\40\0\1\26\1\0"+
    "\2\26\4\0\12\27\25\0\10\26\1\0\3\26\1\0\27\26\1\0"+
    "\20\26\46\0\2\26\4\0\12\27\25\0\22\26\3\0\30\26\1\0"+
    "\11\26\1\0\1\26\2\0\7\26\72\0\60\26\1\0\2\26\14\0"+
    "\7\26\11\0\12\27\47\0\2\26\1\0\1\26\2\0\2\26\1\0"+
    "\1\26\2\0\1\26\6\0\4\26\1\0\7\26\1\0\3\26\1\0"+
    "\1\26\1\0\1\26\2\0\2\26\1\0\4\26\1\0\2\26\11\0"+
    "\1\26\2\0\5\26\1\0\1\26\11\0\12\27\2\0\2\26\42\0"+
    "\1\26\37\0\12\27\26\0\10\26\1\0\42\26\35\0\4\26\164\0"+
    "\42\26\1\0\5\26\1\0\2\26\25\0\12\27\6\0\6\26\112\0"+
    "\46\26\12\0\51\26\7\0\132\26\5\0\104\26\5\0\122\26\6\0"+
    "\7\26\1\0\77\26\1\0\1\26\1\0\4\26\2\0\7\26\1\0"+
    "\1\26\1\0\4\26\2\0\47\26\1\0\1\26\1\0\4\26\2\0"+
    "\37\26\1\0\1\26\1\0\4\26\2\0\7\26\1\0\1\26\1\0"+
    "\4\26\2\0\7\26\1\0\7\26\1\0\27\26\1\0\37\26\1\0"+
    "\1\26\1\0\4\26\2\0\7\26\1\0\47\26\1\0\23\26\16\0"+
    "\11\27\56\0\125\26\14\0\u026c\26\2\0\10\26\12\0\32\26\5\0"+
    "\113\26\25\0\15\26\1\0\4\26\16\0\22\26\16\0\22\26\16\0"+
    "\15\26\1\0\3\26\17\0\64\26\43\0\1\26\4\0\1\26\3\0"+
    "\12\27\46\0\12\27\6\0\130\26\10\0\51\26\127\0\35\26\51\0"+
    "\12\27\36\26\2\0\5\26\u038b\0\154\26\224\0\234\26\4\0\132\26"+
    "\6\0\26\26\2\0\6\26\2\0\46\26\2\0\6\26\2\0\10\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\37\26\2\0\65\26"+
    "\1\0\7\26\1\0\1\26\3\0\3\26\1\0\7\26\3\0\4\26"+
    "\2\0\6\26\4\0\15\26\5\0\3\26\1\0\7\26\164\0\1\26"+
    "\15\0\1\26\202\0\1\26\4\0\1\26\2\0\12\26\1\0\1\26"+
    "\3\0\5\26\6\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\1\0\3\26\1\0\7\26\3\0\3\26\5\0\5\26\u0ebb\0\2\26"+
    "\52\0\5\26\5\0\2\26\4\0\126\26\6\0\3\26\1\0\132\26"+
    "\1\0\4\26\5\0\50\26\4\0\136\26\21\0\30\26\70\0\20\26"+
    "\u0200\0\u19b6\26\112\0\u51a6\26\132\0\u048d\26\u0773\0\u2ba4\26\u215c\0\u012e\26"+
    "\2\0\73\26\225\0\7\26\14\0\5\26\5\0\1\26\1\0\12\26"+
    "\1\0\15\26\1\0\5\26\1\0\1\26\1\0\2\26\1\0\2\26"+
    "\1\0\154\26\41\0\u016b\26\22\0\100\26\2\0\66\26\50\0\14\26"+
    "\164\0\5\26\1\0\207\26\23\0\12\27\7\0\32\26\6\0\32\26"+
    "\13\0\131\26\3\0\6\26\2\0\6\26\2\0\6\26\2\0\3\26"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\3\1\4\1\5\1\2\2\6"+
    "\1\7\1\5\2\10\1\11\2\5\1\12\1\13\1\14"+
    "\6\5\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\2\4\3\0\2\6"+
    "\3\5\3\10\1\0\1\11\2\0\3\5\1\41\1\5"+
    "\1\42\1\43\4\5\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\0\1\54\1\55\1\4\1\56"+
    "\1\6\1\0\1\5\1\57\1\60\1\0\1\5\1\61"+
    "\1\5\1\62\5\5\1\63\1\64\1\4\1\65\1\66"+
    "\1\5\1\67\3\5\1\70\1\4\1\0\2\5\1\71"+
    "\1\72\1\0\1\4\1\0\1\5\1\73\1\0\1\4"+
    "\1\65\1\5\1\74\1\4\1\75\160\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\76\0\272\0\370\0\u0136\0\u0174"+
    "\0\u01b2\0\76\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326"+
    "\0\u0364\0\76\0\76\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a"+
    "\0\u04d8\0\76\0\u0516\0\76\0\76\0\76\0\u0554\0\u0592"+
    "\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\76\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\u0744\0\u0782\0\u0136"+
    "\0\u07c0\0\u07fe\0\u083c\0\76\0\u087a\0\u08b8\0\u08f6\0\u0934"+
    "\0\76\0\u0972\0\u09b0\0\76\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\370\0\370\0\u0ba0\0\u0bde\0\u0c1c"+
    "\0\u0c5a\0\u0c98\0\76\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\u0cd6\0\76\0\76\0\u0d14\0\76\0\u0d52\0\u0d52"+
    "\0\u0d90\0\u087a\0\76\0\u0dce\0\u0e0c\0\370\0\u0e4a\0\76"+
    "\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\76\0\76\0\u0fbe"+
    "\0\u0ffc\0\370\0\u103a\0\370\0\u1078\0\u10b6\0\u10f4\0\370"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\370\0\370\0\u122a\0\u1268"+
    "\0\u12a6\0\u12e4\0\370\0\u1322\0\u1360\0\76\0\u139e\0\u13dc"+
    "\0\u141a\0\370\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e"+
    "\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e"+
    "\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e"+
    "\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e"+
    "\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e"+
    "\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e"+
    "\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e"+
    "\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe"+
    "\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee"+
    "\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade"+
    "\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce"+
    "\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe"+
    "\0\u2efc\0\u2f3a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\6\1\12\1\13\1\2\1\14\1\15\1\16\1\17"+
    "\1\6\1\20\3\6\1\7\1\2\1\21\1\22\1\6"+
    "\1\23\1\6\1\24\2\6\1\25\1\26\1\27\1\6"+
    "\1\30\3\6\1\31\1\6\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\77\0\1\3\74\0\1\56\1\0\1\56\1\57\72\56"+
    "\4\0\6\6\1\0\1\6\4\0\6\6\3\60\1\61"+
    "\1\6\1\0\16\6\30\0\6\60\1\0\1\60\4\0"+
    "\11\60\1\61\1\60\1\0\16\60\32\0\2\10\1\0"+
    "\1\62\1\0\1\63\4\0\1\62\63\0\2\11\1\64"+
    "\1\62\1\0\1\63\4\0\1\62\61\0\2\65\2\66"+
    "\2\65\1\0\1\67\4\0\6\65\4\0\1\65\1\0"+
    "\16\65\24\0\14\14\1\70\1\71\60\14\14\15\1\72"+
    "\1\15\1\71\57\15\12\0\1\73\4\0\1\74\1\75"+
    "\1\73\16\0\1\76\5\0\1\73\14\0\1\73\4\0"+
    "\2\73\10\0\6\6\1\0\1\6\4\0\5\6\1\77"+
    "\3\60\1\61\1\6\1\0\16\6\30\0\6\6\1\0"+
    "\1\6\4\0\1\6\1\100\4\6\3\60\1\61\1\6"+
    "\1\0\1\101\15\6\107\0\1\102\16\0\6\6\1\0"+
    "\1\6\4\0\1\103\5\6\3\60\1\61\1\6\1\0"+
    "\16\6\30\0\6\6\1\0\1\6\4\0\2\6\1\104"+
    "\3\6\3\60\1\61\1\6\1\0\1\6\1\105\14\6"+
    "\30\0\6\6\1\0\1\6\4\0\1\106\5\6\3\60"+
    "\1\61\1\6\1\0\16\6\30\0\6\6\1\0\1\6"+
    "\4\0\6\6\3\60\1\61\1\6\1\0\7\6\1\107"+
    "\6\6\30\0\6\6\1\0\1\6\4\0\6\6\3\60"+
    "\1\61\1\6\1\0\5\6\1\110\10\6\30\0\6\6"+
    "\1\0\1\6\4\0\6\6\3\60\1\61\1\6\1\0"+
    "\15\6\1\111\77\0\1\112\101\0\1\113\76\0\1\114"+
    "\77\0\1\115\75\0\1\116\75\0\1\117\43\0\1\120"+
    "\31\0\1\121\1\0\1\122\76\0\1\123\76\0\1\124"+
    "\7\0\1\56\1\0\75\56\1\0\1\56\1\125\72\56"+
    "\32\0\1\61\1\126\6\0\1\61\41\0\2\127\2\0"+
    "\1\130\15\0\1\130\53\0\2\63\1\0\1\62\6\0"+
    "\1\62\61\0\6\65\1\0\1\65\4\0\6\65\4\0"+
    "\1\65\1\0\16\65\30\0\2\65\2\66\1\65\1\131"+
    "\1\0\1\65\4\0\1\131\5\65\4\0\1\65\1\0"+
    "\16\65\30\0\6\65\1\0\1\132\4\0\6\65\4\0"+
    "\1\65\1\0\16\65\24\0\1\14\1\0\74\14\1\15"+
    "\1\0\74\15\17\0\1\133\77\0\1\134\111\0\1\73"+
    "\44\0\6\6\1\0\1\6\4\0\6\6\3\60\1\61"+
    "\1\135\1\0\16\6\30\0\6\6\1\0\1\6\4\0"+
    "\6\6\3\60\1\61\1\6\1\0\5\6\1\136\10\6"+
    "\30\0\6\6\1\0\1\6\4\0\6\6\3\60\1\61"+
    "\1\6\1\0\1\6\1\137\14\6\107\0\1\140\16\0"+
    "\6\6\1\0\1\6\4\0\6\6\3\60\1\61\1\6"+
    "\1\0\12\6\1\141\3\6\30\0\6\6\1\0\1\6"+
    "\4\0\6\6\3\60\1\61\1\6\1\0\13\6\1\142"+
    "\2\6\30\0\6\6\1\0\1\6\4\0\6\6\3\60"+
    "\1\61\1\6\1\0\4\6\1\143\11\6\30\0\6\6"+
    "\1\0\1\6\4\0\1\144\5\6\3\60\1\61\1\6"+
    "\1\0\16\6\30\0\4\6\1\145\1\6\1\0\1\6"+
    "\4\0\6\6\3\60\1\61\1\6\1\0\16\6\77\0"+
    "\1\146\52\0\1\147\45\0\1\56\1\0\1\56\1\150"+
    "\72\56\6\0\2\127\72\0\6\65\1\130\1\65\4\0"+
    "\6\65\2\0\1\130\1\0\1\65\1\0\16\65\46\0"+
    "\1\151\57\0\6\6\1\0\1\6\4\0\1\152\5\6"+
    "\3\60\1\61\1\6\1\0\16\6\30\0\6\6\1\0"+
    "\1\6\4\0\6\6\3\60\1\61\1\6\1\0\2\6"+
    "\1\153\13\6\30\0\6\6\1\0\1\6\4\0\6\6"+
    "\3\60\1\61\1\6\1\0\3\6\1\154\12\6\30\0"+
    "\6\6\1\0\1\6\4\0\1\155\5\6\3\60\1\61"+
    "\1\6\1\0\16\6\30\0\6\6\1\0\1\6\4\0"+
    "\5\6\1\156\3\60\1\61\1\6\1\0\16\6\30\0"+
    "\6\6\1\0\1\6\4\0\4\6\1\157\1\6\3\60"+
    "\1\61\1\6\1\0\16\6\30\0\4\6\1\160\1\6"+
    "\1\0\1\6\4\0\6\6\3\60\1\61\1\6\1\0"+
    "\16\6\24\0\1\56\1\0\1\56\1\161\72\56\23\0"+
    "\1\162\56\0\6\6\1\0\1\6\4\0\6\6\3\60"+
    "\1\61\1\6\1\0\3\6\1\163\12\6\30\0\6\6"+
    "\1\0\1\6\4\0\4\6\1\164\1\6\3\60\1\61"+
    "\1\6\1\0\16\6\30\0\6\6\1\0\1\6\4\0"+
    "\1\165\5\6\3\60\1\61\1\6\1\0\16\6\30\0"+
    "\6\6\1\0\1\6\4\0\6\6\3\60\1\61\1\6"+
    "\1\0\11\6\1\166\4\6\24\0\1\56\1\167\1\56"+
    "\1\170\72\56\24\0\1\171\55\0\6\6\1\0\1\6"+
    "\4\0\6\6\3\60\1\61\1\6\1\0\4\6\1\172"+
    "\11\6\30\0\6\6\1\0\1\6\4\0\6\6\3\60"+
    "\1\61\1\6\1\0\3\6\1\173\12\6\27\0\1\174"+
    "\72\0\1\56\1\167\1\56\1\175\72\56\25\0\1\176"+
    "\54\0\6\6\1\0\1\6\4\0\1\6\1\177\4\6"+
    "\3\60\1\61\1\6\1\0\16\6\27\0\1\200\72\0"+
    "\1\56\1\167\1\56\1\201\72\56\4\0\6\6\1\0"+
    "\1\6\4\0\6\6\3\60\1\61\1\6\1\0\1\6"+
    "\1\202\14\6\24\0\1\200\1\0\74\200\1\56\1\167"+
    "\1\56\1\203\73\56\1\167\1\56\1\204\73\56\1\167"+
    "\1\56\1\205\73\56\1\167\1\56\1\206\73\56\1\167"+
    "\1\56\1\207\73\56\1\167\1\56\1\210\73\56\1\167"+
    "\1\56\1\211\73\56\1\167\1\56\1\212\73\56\1\167"+
    "\1\56\1\213\73\56\1\167\1\56\1\214\73\56\1\167"+
    "\1\56\1\215\73\56\1\167\1\56\1\216\73\56\1\167"+
    "\1\56\1\217\73\56\1\167\1\56\1\220\73\56\1\167"+
    "\1\56\1\221\73\56\1\167\1\56\1\222\73\56\1\167"+
    "\1\56\1\223\73\56\1\167\1\56\1\224\73\56\1\167"+
    "\1\56\1\225\73\56\1\167\1\56\1\226\73\56\1\167"+
    "\1\56\1\227\73\56\1\167\1\56\1\230\73\56\1\167"+
    "\1\56\1\231\73\56\1\167\1\56\1\232\73\56\1\167"+
    "\1\56\1\233\73\56\1\167\1\56\1\234\73\56\1\167"+
    "\1\56\1\235\73\56\1\167\1\56\1\236\73\56\1\167"+
    "\1\56\1\237\73\56\1\167\1\56\1\240\73\56\1\167"+
    "\1\56\1\241\73\56\1\167\1\56\1\242\73\56\1\167"+
    "\1\56\1\243\73\56\1\167\1\56\1\244\73\56\1\167"+
    "\1\56\1\245\73\56\1\167\1\56\1\246\73\56\1\167"+
    "\1\56\1\247\73\56\1\167\1\56\1\250\73\56\1\167"+
    "\1\56\1\251\73\56\1\167\1\56\1\252\73\56\1\167"+
    "\1\56\1\253\73\56\1\167\1\56\1\254\73\56\1\167"+
    "\1\56\1\255\73\56\1\167\1\56\1\256\73\56\1\167"+
    "\1\56\1\257\73\56\1\167\1\56\1\260\73\56\1\167"+
    "\1\56\1\261\73\56\1\167\1\56\1\262\73\56\1\167"+
    "\1\56\1\263\73\56\1\167\1\56\1\264\73\56\1\167"+
    "\1\56\1\265\73\56\1\167\1\56\1\266\73\56\1\167"+
    "\1\56\1\267\73\56\1\167\1\56\1\270\73\56\1\167"+
    "\1\56\1\271\73\56\1\167\1\56\1\272\73\56\1\167"+
    "\1\56\1\273\73\56\1\167\1\56\1\274\73\56\1\167"+
    "\1\56\1\275\73\56\1\167\1\56\1\276\73\56\1\167"+
    "\1\56\1\277\73\56\1\167\1\56\1\300\73\56\1\167"+
    "\1\56\1\301\73\56\1\167\1\56\1\302\73\56\1\167"+
    "\1\56\1\303\73\56\1\167\1\56\1\304\73\56\1\167"+
    "\1\56\1\305\73\56\1\167\1\56\1\306\73\56\1\167"+
    "\1\56\1\307\73\56\1\167\1\56\1\310\73\56\1\167"+
    "\1\56\1\311\73\56\1\167\1\56\1\312\73\56\1\167"+
    "\1\56\1\313\73\56\1\167\1\56\1\314\73\56\1\167"+
    "\1\56\1\315\73\56\1\167\1\56\1\316\73\56\1\167"+
    "\1\56\1\317\73\56\1\167\1\56\1\320\73\56\1\167"+
    "\1\56\1\321\73\56\1\167\1\56\1\322\73\56\1\167"+
    "\1\56\1\323\73\56\1\167\1\56\1\324\73\56\1\167"+
    "\1\56\1\325\73\56\1\167\1\56\1\326\73\56\1\167"+
    "\1\56\1\327\73\56\1\167\1\56\1\330\73\56\1\167"+
    "\1\56\1\331\73\56\1\167\1\56\1\332\73\56\1\167"+
    "\1\56\1\333\73\56\1\167\1\56\1\334\73\56\1\167"+
    "\1\56\1\335\73\56\1\167\1\56\1\336\73\56\1\167"+
    "\1\56\1\337\73\56\1\167\1\56\1\340\73\56\1\167"+
    "\1\56\1\341\73\56\1\167\1\56\1\342\73\56\1\167"+
    "\1\56\1\343\73\56\1\167\1\56\1\344\73\56\1\167"+
    "\1\56\1\345\73\56\1\167\1\56\1\346\73\56\1\167"+
    "\1\56\1\347\73\56\1\167\1\56\1\350\73\56\1\167"+
    "\1\56\1\351\73\56\1\167\1\56\1\352\73\56\1\167"+
    "\1\56\1\353\73\56\1\167\1\56\1\354\73\56\1\167"+
    "\1\56\1\355\73\56\1\167\1\56\1\356\73\56\1\167"+
    "\1\56\1\357\73\56\1\167\1\56\1\360\73\56\1\167"+
    "\1\56\1\361\73\56\1\167\1\56\1\362\73\56\1\167"+
    "\74\56";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12152];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\5\1\1\11\7\1\2\11"+
    "\6\1\1\11\1\1\3\11\10\1\7\11\2\1\3\0"+
    "\1\1\1\11\4\1\1\11\1\1\1\0\1\11\2\0"+
    "\14\1\7\11\1\0\2\11\1\1\1\11\1\1\1\0"+
    "\2\1\1\11\1\0\3\1\1\11\5\1\2\11\12\1"+
    "\1\0\4\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\11\164\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  StringBuffer string = new StringBuffer();

  //helper
  long yychar = 0;


  public _RLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _RLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1322) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 47: 
          { return R_SYMBOL_FORMALS;
          }
        case 62: break;
        case 42: 
          { return R_LEFT_ASSIGN;
          }
        case 63: break;
        case 38: 
          { yybegin(YYINITIAL); return RTypes.R_RBB;
          }
        case 64: break;
        case 49: 
          { return R_FOR;
          }
        case 65: break;
        case 56: 
          { return R_NULL_CONST;
          }
        case 66: break;
        case 59: 
          { return R_REPEAT;
          }
        case 67: break;
        case 8: 
          { yybegin(YYINITIAL); return RTypes.R_STR_CONST;
          }
        case 68: break;
        case 9: 
          { return R_ARITH_MOD;
          }
        case 69: break;
        case 10: 
          { return R_ARITH_MINUS;
          }
        case 70: break;
        case 31: 
          { return R_SLOT;
          }
        case 71: break;
        case 46: 
          { yybegin(YYINITIAL); return RTypes.R_FUNCTIONCALL;
          }
        case 72: break;
        case 16: 
          { yybegin(YYINITIAL); return RTypes.R_LEFT_BRACE;
          }
        case 73: break;
        case 21: 
          { return R_EQ_ASSIGN;
          }
        case 74: break;
        case 25: 
          { return R_OR;
          }
        case 75: break;
        case 35: 
          { return R_IN;
          }
        case 76: break;
        case 44: 
          { return R_AND2;
          }
        case 77: break;
        case 28: 
          { return R_ARITH_DIV;
          }
        case 78: break;
        case 26: 
          { return R_TILDE;
          }
        case 79: break;
        case 52: 
          { return R_GLOBAL_LEFT_ASSIGN;
          }
        case 80: break;
        case 41: 
          { return R_GE;
          }
        case 81: break;
        case 19: 
          { yybegin(YYINITIAL); return RTypes.R_RIGHT_BRACKET;
          }
        case 82: break;
        case 54: 
          { return R_ELSE;
          }
        case 83: break;
        case 51: 
          { yybegin(YYINITIAL); return RTypes.R_NS_GET_INT;
          }
        case 84: break;
        case 33: 
          { return R_RIGHT_ASSIGN;
          }
        case 85: break;
        case 53: 
          { yybegin(YYINITIAL); return R_EOF;
          }
        case 86: break;
        case 15: 
          { yybegin(YYINITIAL); return R_COMMA;
          }
        case 87: break;
        case 5: 
          { yybegin(YYINITIAL); return RTypes.R_SYMBOL;
          }
        case 88: break;
        case 1: 
          { yybegin(YYINITIAL); return R_EOL;
          }
        case 89: break;
        case 22: 
          { return R_GT;
          }
        case 90: break;
        case 7: 
          { return R_ARITH_PLUS;
          }
        case 91: break;
        case 12: 
          { yybegin(YYINITIAL); return RTypes.R_RIGHT_PAREN;
          }
        case 92: break;
        case 18: 
          { yybegin(YYINITIAL); return RTypes.R_LEFT_BRACKET;
          }
        case 93: break;
        case 14: 
          { yybegin(YYINITIAL); return R_COLON;
          }
        case 94: break;
        case 32: 
          { return R_QUESTION;
          }
        case 95: break;
        case 39: 
          { return R_NE;
          }
        case 96: break;
        case 48: 
          { return R_ARITH_MISC;
          }
        case 97: break;
        case 37: 
          { yybegin(YYINITIAL); return RTypes.R_LBB;
          }
        case 98: break;
        case 55: 
          { return R_NEXT;
          }
        case 99: break;
        case 30: 
          { return R_LIST_SUBSET;
          }
        case 100: break;
        case 3: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 101: break;
        case 61: 
          { return R_FUNCTION;
          }
        case 102: break;
        case 40: 
          { return R_EQ;
          }
        case 103: break;
        case 24: 
          { return R_AND;
          }
        case 104: break;
        case 20: 
          { return R_NEGATION;
          }
        case 105: break;
        case 27: 
          { return R_ARITH_MULT;
          }
        case 106: break;
        case 4: 
          { yybegin(YYINITIAL); return R_COMMENT;
          }
        case 107: break;
        case 43: 
          { return R_LE;
          }
        case 108: break;
        case 34: 
          { return R_IF;
          }
        case 109: break;
        case 17: 
          { yybegin(YYINITIAL); return RTypes.R_RIGHT_BRACE;
          }
        case 110: break;
        case 45: 
          { return R_OR2;
          }
        case 111: break;
        case 13: 
          { yybegin(YYINITIAL); return RTypes.R_SEMICOLON;
          }
        case 112: break;
        case 60: 
          { yybegin(YYINITIAL); return R_SECTION_COMMENT;
          }
        case 113: break;
        case 11: 
          { yybegin(YYINITIAL); return RTypes.R_LEFT_PAREN;
          }
        case 114: break;
        case 23: 
          { return R_LT;
          }
        case 115: break;
        case 57: 
          { return R_WHILE;
          }
        case 116: break;
        case 29: 
          { return R_ARITH_EXPONENTIAION;
          }
        case 117: break;
        case 6: 
          { return R_NUM_CONST;
          }
        case 118: break;
        case 50: 
          { return R_GLOBAL_RIGHT_ASSIGN;
          }
        case 119: break;
        case 58: 
          { return R_BREAK;
          }
        case 120: break;
        case 36: 
          { yybegin(YYINITIAL); return RTypes.R_NS_GET;
          }
        case 121: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 122: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
